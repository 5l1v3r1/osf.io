# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-20 17:30
from __future__ import unicode_literals

import logging
import progressbar
from django.db import migrations
from django.db.models import Q
from osf.utils.migrations import disable_auto_now_add_fields
from django.contrib.contenttypes.models import ContentType
from bulk_update.helper import bulk_update
logger = logging.getLogger(__name__)

def reverse_func(state, schema):
    pass

def get_guid(state, osf_model, content_type_id):
    Guid = state.get_model('osf', 'guid')
    return Guid.objects.get(object_id=osf_model.id, content_type_id=content_type_id)

def move_comment_target(state, current_target, desired_target, current_content_type_id, desired_content_type_id):
    """Move the comment's target from the current target to the desired target"""
    Comment = state.get_model('osf', 'comment')
    current_target_guid = get_guid(state, current_target, current_content_type_id)
    desired_target_guid = get_guid(state, desired_target, desired_content_type_id)
    if Comment.objects.filter(Q(root_target=current_target_guid) | Q(target=current_target_guid)).exists():
        Comment.objects.filter(root_target=current_target_guid).update(root_target=desired_target_guid)
        Comment.objects.filter(target=current_target_guid).update(target=desired_target_guid)
    return

def update_comments_viewed_timestamp(state, node, current_wiki_object, desired_wiki_object, current_ctype_id, desired_ctype_id):
    """Replace the current_wiki_object keys in the comments_viewed_timestamp dict with the desired wiki_object_id """
    Contributor = state.get_model('osf', 'contributor')
    contributors_pending_save = []
    current_wiki_id = get_guid(state, current_wiki_object, current_ctype_id)._id
    desired_wiki_id = get_guid(state, desired_wiki_object, desired_ctype_id)._id
    for contrib in Contributor.objects.filter(node=node).select_related('user'):
        if contrib.user.comments_viewed_timestamp.get(current_wiki_id, None):
            timestamp = contrib.user.comments_viewed_timestamp[current_wiki_id]
            contrib.user.comments_viewed_timestamp[desired_wiki_id] = timestamp
            del contrib.user.comments_viewed_timestamp[desired_wiki_id]
            contributors_pending_save.append(contrib)
    bulk_update(contributors_pending_save, batch_size=1000)
    return

def migrate_guid_referent(guid, desired_referent, content_type_id):
    """
    Point the guid towards the desired_referent.
    Pointing the NodeWikiPage guid towards the WikiPage will still allow links to work.
    """
    guid.content_type_id = content_type_id
    guid.object_id = desired_referent.id
    return guid

def create_wiki_page(state, node, node_wiki, page_name):
    WikiPage = state.get_model('addons_wiki', 'wikipage')
    wp = WikiPage(
        page_name=page_name,
        user_id=node_wiki.user_id,
        node=node,
        created=node_wiki.created,
        modified=node_wiki.modified,
    )
    wp.update_modified = False
    return wp

def create_wiki_version(state, node_wiki, wiki_page):
    WikiVersion = state.get_model('addons_wiki', 'wikiversion')
    wv = WikiVersion(
        wiki_page=wiki_page,
        user_id=node_wiki.user_id,
        created=node_wiki.created,
        modified=node_wiki.modified,
        content=node_wiki.content,
        identifier=node_wiki.version,
    )
    wv.update_modified = False
    return wv

def create_guids(state):
    WikiPage = state.get_model('addons_wiki', 'wikipage')
    Guid = state.get_model('osf', 'guid')
    content_type = ContentType.objects.get_for_model(WikiPage)
    progress_bar = progressbar.ProgressBar(maxval=WikiPage.objects.count()).start()
    logger.info('Creating new guids for all WikiPages:')
    for i, wp in enumerate(WikiPage.objects.all()):
        # looping instead of bulk_create, so _id's are not the same
        progress_bar.update(i + 1)
        Guid.objects.create(object_id=wp.id, content_type_id=content_type.id)
    progress_bar.finish()
    logger.info('WikiPage guids created.')
    return

def get_pk_for_guid(state, _id):
    Guid = state.get_model('osf', 'guid')
    return Guid.objects.filter(_id=_id).values_list('object_id', flat=True).get()

def create_wiki_pages(state, nodes):
    WikiPage = state.get_model('addons_wiki', 'wikipage')
    NodeWikiPage = state.get_model('addons_wiki', 'nodewikipage')
    WikiPage = state.get_model('addons_wiki', 'wikipage')
    wiki_pages = []
    progress_bar = progressbar.ProgressBar(maxval=nodes.count()).start()
    logger.info('Starting migration of WikiPages:')
    for i, node in enumerate(nodes):
        progress_bar.update(i + 1)
        for wiki_key, version_list in node.wiki_pages_versions.iteritems():
            if version_list:
                node_wiki_page_id = get_pk_for_guid(state, _id=version_list[0])
                node_wiki = NodeWikiPage.objects.filter(id=node_wiki_page_id).only('user_id', 'created', 'modified').get()
                latest_page_name = NodeWikiPage.objects.filter(id=get_pk_for_guid(state, _id=version_list[-1])).values_list('page_name', flat=True).get()
                wiki_pages.append(create_wiki_page(state, node, node_wiki, latest_page_name))
    progress_bar.finish()
    with disable_auto_now_add_fields(models=[WikiPage]):
        WikiPage.objects.bulk_create(wiki_pages, batch_size=1000)
    logger.info('WikiPages saved.')
    create_guids(state)
    return

def get_content_type_id(model):
    return ContentType.objects.get_for_model(model).id

def create_wiki_versions(state, nodes):
    NodeWikiPage = state.get_model('addons_wiki', 'nodewikipage')
    WikiVersion = state.get_model('addons_wiki', 'wikiversion')
    Guid = state.get_model('osf', 'guid')
    WikiPage = state.get_model('addons_wiki', 'wikipage')
    wp_content_type_id = get_content_type_id(WikiPage)
    nwp_content_type_id = get_content_type_id(NodeWikiPage)
    wiki_versions_pending = []
    guids_pending = []

    progress_bar = progressbar.ProgressBar(maxval=nodes.count()).start()
    logger.info('Starting migration of WikiVersions:')
    for i, node in enumerate(nodes):
        progress_bar.update(i + 1)
        for wiki_key, version_list in node.wiki_pages_versions.iteritems():
            if version_list:
                node_wiki = NodeWikiPage.objects.get(id=get_pk_for_guid(state, _id=version_list[0]))
                page_name = NodeWikiPage.objects.filter(id=get_pk_for_guid(state, _id=version_list[-1])).values_list('page_name', flat=True).get()
                wiki_page = node.wikis.get(page_name=page_name)
                for index, version in enumerate(version_list):
                    if index:
                        node_wiki = NodeWikiPage.objects.get(id=Guid.objects.get(_id=version).object_id)
                    wiki_versions_pending.append(create_wiki_version(state, node_wiki, wiki_page))
                    guids_pending.append(migrate_guid_referent(Guid.objects.get(object_id=node_wiki.id, content_type=nwp_content_type_id), wiki_page, wp_content_type_id))
                move_comment_target(state, node_wiki, wiki_page, nwp_content_type_id, wp_content_type_id)
                update_comments_viewed_timestamp(state, node, node_wiki, wiki_page, nwp_content_type_id, wp_content_type_id)
    progress_bar.finish()
    with disable_auto_now_add_fields(models=[WikiVersion]):
        WikiVersion.objects.bulk_create(wiki_versions_pending, batch_size=1000)
    logger.info('WikiVersions saved.')
    bulk_update(guids_pending, batch_size=1000)
    logger.info('Repointed NodeWikiPage guids to corresponding WikiPage')
    return

def migrate_node_wiki_pages(state, schema):
    """
    For every node, loop through all the NodeWikiPages on node.wiki_pages_versions.  Create a WikiPage, and then a WikiVersion corresponding
    to each WikiPage.
        - Loads all nodes with wikis on them.
        - For each node, loops through all the keys in wiki_pages_versions.
        - Creates all wiki pages and then bulk creates them, for speed.
        - For all wiki pages that were just created, create and save a guid (since bulk_create doesn't call save method)
        - Loops through all nodes again, creating a WikiVersion for every guid for all wiki pages on a node.
        - Repoints guids from old wiki to new WikiPage
        - For the most recent version of the WikiPage, repoint comments to the new WikiPage
        - For comments_viewed_timestamp that point to the NodeWikiPage, repoint to the new WikiPage
    """
    AbstractNode = state.get_model('osf', 'abstractnode')
    nodes_with_wikis = AbstractNode.objects.exclude(wiki_pages_versions={})
    if nodes_with_wikis:
        create_wiki_pages(state, nodes_with_wikis)
        create_wiki_versions(state, nodes_with_wikis)
    return


class Migration(migrations.Migration):

    dependencies = [
        ('addons_wiki', '0006_wikipage_wikiversion'),
    ]

    operations = [
        migrations.RunPython(migrate_node_wiki_pages, reverse_func)
    ]
