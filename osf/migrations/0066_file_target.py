# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-12 17:36
from __future__ import unicode_literals

import logging
from django.db import migrations, models
import django.db.models.deletion
from django.apps import apps
from django.core.paginator import Paginator

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def migrate_node_to_target(*args, **kwargs):

    BaseFileNode = apps.get_model('osf', 'BaseFileNode')
    AbstractNode = apps.get_model('osf', 'AbstractNode')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    files_with_no_target = BaseFileNode.objects.filter(object_id__isnull=True)
    total_files_to_update = files_with_no_target.count()
    logger.info('About to update {} files from target to node.'.format(total_files_to_update))
    node_content_type = ContentType.objects.get_for_model(AbstractNode)

    paginated_files = Paginator(files_with_no_target, 1000)

    total_updated = 0
    for page_num in paginated_files.page_range:
        for filenode in paginated_files.page(page_num).object_list:

            filenode.target = filenode.node
            filenode.object_id = filenode.node.id
            filenode.content_type = node_content_type

            filenode.save()

            total_updated += 1

        logger.info('Updated {}/{} files to have targets'.format(total_updated, total_files_to_update))


def migrate_target_to_node(*args, **kwargs):
    files_with_target = list(BaseFileNode.objects.filter(object_id__isnull=False).values_list('id', flat=True))
    total_files_to_update = len(files_with_target)
    logger.info('About to revert {} files from node to target.'.format(total_files_to_update))

    paginated_files = Paginator(files_with_target, 1000)

    total_updated = 0
    total_targets_lost = 0
    for page_num in paginated_files.page_range:
        for filenode in paginated_files.page(page_num).object_list:
            if isinstance(filenode.target, AbstractNode):
                filenode.node = filenode.target
                filenode.object_id = None
                filenode.content_type = None
            else:
                logger.warn(
                    'Running a reverse migration on a filenode (id {}) whose target is a {}, relationship will be lost.'.format(
                        filenode.id, type(filenode.target)
                    )
                )
                total_targets_lost += 1
            filenode.save()

            total_updated += 1

        logger.info('Reverted {}/{} files back to to have node relationships'.format(total_updated, total_files_to_update))

    logger.info('Finished reverting {} files back to to have targets'.format(total_updated))
    logger.info('A total of {} files had a non-node target.'.format(total_targets_lost))


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('osf', '0065_preprintservice_original_publication_date'),
    ]

    operations = [
        migrations.AddField(
            model_name='basefilenode',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='object_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='is_root',
            field=models.NullBooleanField(default=False),
        ),
        migrations.RunPython(migrate_node_to_target, migrate_target_to_node),
        # migrations.RemoveField(
        #     model_name='basefilenode',
        #     name='node',
        # ),
    ]
