# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-03-03 17:52
from __future__ import unicode_literals

import logging
from math import ceil

from django.db import migrations, connection

logger = logging.getLogger(__file__)

increment = 10000

def noop(*args, **kwargs):
    pass


# Batching adapted from strategy in website/search_migration/migrate.py
def populate_fileversion_name(state, schema):
    BaseFileNodeVersion = state.get_model('osf.basefilenode_versions')
    max_thru_id = getattr(BaseFileNodeVersion.objects.order_by('id').last(), 'id', 0)

    sql = """
        INSERT INTO osf_basefileversionsthrough (basefilenode_id, fileversion_id, version_name)
        SELECT F.id, V.id, F.name
        FROM osf_basefilenode_versions THRU, osf_fileversion V, osf_basefilenode F
        WHERE THRU.fileversion_id = V.id
        AND THRU.basefilenode_id = F.id
        AND THRU.id > {}
        AND THRU.id <= {};
    """

    total_pages = int(ceil(max_thru_id / float(increment)))
    page_start = 0
    page_end = 0
    page = 0
    while page_end <= (max_thru_id):
        page += 1
        page_end += increment
        if page <= total_pages:
            logger.info('Transferring BaseFileNodeVersions to custom through table: {} / {}'.format(page_end / increment, total_pages))
        with connection.cursor() as cursor:
            cursor.execute(sql.format(
                page_start,
                page_end,
                page_start,
                page_end
            ))
        page_start = page_end

class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0160_add_custom_file_versions_through'),
    ]

    operations = [
        migrations.RunPython(populate_fileversion_name, migrations.RunPython.noop)
    ]
