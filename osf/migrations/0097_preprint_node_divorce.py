# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-03-12 18:25
from __future__ import unicode_literals

from itertools import islice, chain

from django.contrib.auth.models import Group
from django.db import migrations
from django.db.models import F
from django.db.models import OuterRef, Subquery
from guardian.shortcuts import assign_perm, get_perms, remove_perm
from django.core.management.sql import emit_post_migrate_signal
from bulk_update.helper import bulk_update
from osf.models import OSFUser

def reverse_func(apps, schema_editor):
    # TODO
    pass

def batch(iterable, size):
    sourceiter = iter(iterable)
    while True:
        batchiter = islice(sourceiter, size)
        yield chain([batchiter.next()], batchiter)

def divorce_preprints_from_nodes(apps, schema_editor):
    # this is to make sure that the permissions created earlier exist!
    emit_post_migrate_signal(2, False, 'default')

    Preprint = apps.get_model('osf', 'Preprint')
    AbstractNode = apps.get_model('osf', 'AbstractNode')
    PreprintContributor = apps.get_model('osf', 'PreprintContributor')

    contributors = []
    preprints = []

    for preprint in Preprint.objects.filter(node__isnull=False).select_related('node'):
        node = preprint.node

        preprint.title = node.title
        preprint.description = node.description
        preprint.creator = node.logs.filter(action='preprint_initiated').first()
        preprint.article_doi = node.preprint_article_doi
        preprint.primary_file = node.preprint_file
        preprint.is_public = node.is_public
        preprint.deleted = node.logs.filter(action='project_deleted').first().date
        preprint.migrated = datetime.datetime.now()

        # use bulk create
        admin = []
        write = []
        read = []
        for contrib in preprint.node.contributor_set.all():
            # make a PreprintContributor that points to the pp instead of the node
            # because there's a throughtable, relations are designated
            # solely on the through model, and adds on the related models
            # are not required.

            new_contrib = PreprintContributor(
                preprint_id=preprint.id,
                user_id=contrib.user.id,
                visible=contrib.visible,
                _order=contrib._order
            )
            contributors.append(new_contrib)
            if contrib.admin:
                admin.append(contrib.user)
            elif contrib.write:
                write.append(contrib.user)
            else:
                read.append(contrib.user)

        update_group_permissions(preprint)

        add_users_to_group(Group.objects.get(name=format_group(preprint, 'admin')), admin)
        add_users_to_group(Group.objects.get(name=format_group(preprint, 'write')), write)
        add_users_to_group(Group.objects.get(name=format_group(preprint, 'read')), read)

        preprints.append(preprint)

    batch_size = 1000
    for batchiter in batch(contributors, batch_size):
        PreprintContributor.objects.bulk_create(batchiter)

    bulk_update(preprints, update_fields=['title', 'description', 'creator', 'article_doi', 'primary_file', 'is_public', 'deleted', 'migrated'])

group_format = 'preprint_{self.id}_{group}'

def format_group(self, name):
    return group_format.format(self=self, group=name)

def update_group_permissions(self):
    for group_name, group_permissions in groups.items():
        group, created = Group.objects.get_or_create(name=format_group(self, group_name))
        to_remove = set(get_perms(group, self)).difference(group_permissions)
        for p in to_remove:
            remove_perm(p, group, self)
        for p in group_permissions:
            assign_perm(p, group, self)

groups = {
    'read': ('read_preprint',),
    'write': ('read_preprint', 'write_preprint',),
    'admin': ('read_preprint', 'write_preprint', 'admin_preprint',)
}

def add_users_to_group(group, user_list):
    for user in user_list:
        group.user_set.add(OSFUser.objects.get(id=user.id))


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0096_add_preprint_partial_index'),
    ]

    operations = [
        migrations.RunPython(divorce_preprints_from_nodes, reverse_func)
    ]
