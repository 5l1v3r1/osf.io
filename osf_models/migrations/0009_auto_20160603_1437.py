# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-06-03 19:37
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import osf_models.models.sanctions
import osf_models.utils.base
import osf_models.utils.datetime_aware_jsonfield


class Migration(migrations.Migration):

    dependencies = [
        ('osf_models', '0008_remove_nodelog_was_connected_to'),
    ]

    operations = [
        migrations.CreateModel(
            name='Embargo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_state', osf_models.utils.datetime_aware_jsonfield.DatetimeAwareJSONField(default={})),
                ('end_date', models.DateTimeField(default=None, null=True)),
                ('guid', models.CharField(default=osf_models.utils.base.get_object_id, max_length=255)),
                ('initation_date', models.DateTimeField(null=True)),
                ('state', models.CharField(choices=[(b'unapproved', b'Unapproved'), (b'approved', b'Approved'), (b'rejected', b'Rejected'), (b'completed', b'Completed')], default=b'unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf_models.utils.datetime_aware_jsonfield.DatetimeAwareJSONField(default={})),
                ('for_existing_registration', models.BooleanField(default=False)),
                ('initiated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf_models.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(osf_models.models.sanctions.PreregCallbackMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MetaSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(db_index=True, default=osf_models.utils.base.get_object_id, max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('schema', osf_models.utils.datetime_aware_jsonfield.DatetimeAwareJSONField(default={})),
                ('category', models.CharField(max_length=255)),
                ('schema_version', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_state', osf_models.utils.datetime_aware_jsonfield.DatetimeAwareJSONField(default={})),
                ('end_date', models.DateTimeField(default=None, null=True)),
                ('guid', models.CharField(default=osf_models.utils.base.get_object_id, max_length=255)),
                ('initation_date', models.DateTimeField(null=True)),
                ('state', models.CharField(choices=[(b'unapproved', b'Unapproved'), (b'approved', b'Approved'), (b'rejected', b'Rejected'), (b'completed', b'Completed')], default=b'unapproved', max_length=255)),
                ('notify_initiator_on_complete', models.BooleanField(default=False)),
                ('stashed_urls', osf_models.utils.datetime_aware_jsonfield.DatetimeAwareJSONField(default={})),
            ],
            options={
                'abstract': False,
            },
            bases=(osf_models.models.sanctions.PreregCallbackMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='metaschema',
            unique_together=set([('name', 'schema_version', 'guid')]),
        ),
        migrations.AddField(
            model_name='node',
            name='embargo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='osf_models.Embargo'),
        ),
        migrations.AddField(
            model_name='node',
            name='registered_schema',
            field=models.ManyToManyField(to='osf_models.MetaSchema'),
        ),
    ]
